
.tags-input-root {
    position: relative;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///node_modules/@voerro/vue-tagsinput/src/VoerroTagsInput.vue"],"names":[],"mappings":";AAwZA;IACA;AACA","file":"tags.css","sourcesContent":["<template>\n    <div class=\"tags-input-root\">\n        <div :class=\"wrapperClass + ' tags-input'\">\n            <span class=\"tags-input-badge tags-input-badge-pill tags-input-badge-selected-default\"\n                v-for=\"(badge, index) in tagBadges\"\n                :key=\"index\"\n            >\n                <span v-html=\"badge\"></span>\n\n                <i href=\"#\" class=\"tags-input-remove\" @click.prevent=\"removeTag(index)\"></i>\n            </span>\n\n            <input type=\"text\"\n                ref=\"taginput\"\n                :placeholder=\"placeholder\"\n                v-model=\"input\"\n                @keydown.enter.prevent=\"tagFromInput\"\n                @keydown.8=\"removeLastTag\"\n                @keydown.down=\"nextSearchResult\"\n                @keydown.up=\"prevSearchResult\"\n                @keydown=\"onKeyDown\"\n                @keyup=\"searchTag\"\n                @keyup.esc=\"ignoreSearchResults\"\n                @focus=\"onFocus\"\n                @blur=\"hideTypeahead\"\n                @value=\"tags\">\n\n            <input type=\"hidden\" v-if=\"elementId\"\n                :name=\"elementId\"\n                :id=\"elementId\"\n                v-model=\"hiddenInput\">\n        </div>\n\n        <!-- Typeahead/Autocomplete -->\n        <div v-show=\"searchResults.length\">\n            <p v-if=\"typeaheadStyle === 'badges'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <span v-for=\"(tag, index) in searchResults\"\n                    :key=\"index\"\n                    v-text=\"tag.text\"\n                    @mouseover=\"searchSelection = index\"\n                    @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                    class=\"tags-input-badge\"\n                    v-bind:class=\"{\n                        'tags-input-typeahead-item-default': index != searchSelection,\n                        'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                    }\"></span>\n            </p>\n\n            <ul v-else-if=\"typeaheadStyle === 'dropdown'\" :class=\"`typeahead-${typeaheadStyle}`\">\n                <li v-for=\"(tag, index) in searchResults\"\n                :key=\"index\"\n                v-text=\"tag.text\"\n                @mouseover=\"searchSelection = index\"\n                @mousedown.prevent=\"tagFromSearchOnClick(tag)\"\n                v-bind:class=\"{\n                    'tags-input-typeahead-item-default': index != searchSelection,\n                    'tags-input-typeahead-item-highlighted-default': index == searchSelection\n                }\"></li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        elementId: String,\n\n        existingTags: {\n            type: Object,\n            default: () => {\n                return {};\n            }\n        },\n\n        value: {\n            type: [Array, String],\n            default: () => {\n                return [];\n            }\n        },\n\n        typeahead: {\n            type: Boolean,\n            default: false\n        },\n\n        typeaheadStyle: {\n            type: String,\n            default: 'badges'\n        },\n\n        typeaheadActivationThreshold: {\n            type: Number,\n            default: 1\n        },\n\n        typeaheadMaxResults: {\n            type: Number,\n            default: 0\n        },\n\n        placeholder: {\n            type: String,\n            default: 'Add a tag'\n        },\n\n        limit: {\n            type: Number,\n            default: 0\n        },\n\n        onlyExistingTags: {\n            type: Boolean,\n            default: false\n        },\n\n        deleteOnBackspace: {\n            type: Boolean,\n            default: true\n        },\n\n        allowDuplicates: {\n            type: Boolean,\n            default: false\n        },\n        \n        validate: {\n            type: Function,\n            default: () => true\n        },\n\n        addTagsOnComma: {\n            type: Boolean,\n            default: false\n        },\n\n        wrapperClass: {\n            type: String,\n            default: 'tags-input-wrapper-default'\n        },\n    },\n\n    data() {\n        return {\n            badgeId: 0,\n            tagBadges: [],\n            tags: [],\n\n            input: '',\n            oldInput: '',\n            hiddenInput: '',\n\n            searchResults: [],\n            searchSelection: 0,\n        };\n    },\n\n    created () {\n        this.tagsFromValue();\n\n        // Emit an event\n        this.$emit('initialized');\n    },\n\n    watch: {\n        tags() {\n            // Updating the hidden input\n            this.hiddenInput = this.tags.join(',');\n\n            // Update the bound v-model value\n            this.$emit('input', this.tags);\n        },\n\n        value() {\n            this.tagsFromValue();\n        }\n    },\n\n    methods: {\n        escapeRegExp(string) {\n            return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        },\n\n        tagFromInput() {\n            // If we're choosing a tag from the search results\n            if (this.searchResults.length && this.searchSelection >= 0) {\n                this.tagFromSearch(this.searchResults[this.searchSelection]);\n\n                this.input = '';\n            } else {\n                // If we're adding an unexisting tag\n                let text = this.input.trim();\n\n                // If the new tag is not an empty string and passes validation\n                if (!this.onlyExistingTags && text.length && this.validate(text)) {\n                    this.input = '';\n\n                    // Determine the tag's slug and text depending on if the tag exists\n                    // on the site already or not\n                    let slug = this.makeSlug(text);\n                    let existingTag = this.existingTags[slug];\n\n                    slug = existingTag ? slug : text;\n                    text = existingTag ? existingTag : text;\n\n                    this.addTag(slug, text);\n                }\n            }\n        },\n\n        tagFromSearchOnClick(tag) {\n            this.tagFromSearch(tag);\n\n            this.$refs['taginput'].blur();\n        },\n\n        tagFromSearch(tag) {\n            this.searchResults = [];\n            this.input = '';\n            this.oldInput = '';\n\n            this.addTag(tag.slug, tag.text);\n        },\n\n        makeSlug(value) {\n            return value.toLowerCase().replace(/\\s/g, '-');\n        },\n\n        addTag(slug, text) {\n            // Check if the limit has been reached\n            if (this.limit > 0 && this.tags.length >= this.limit) {\n                return false;\n            }\n\n            // Attach the tag if it hasn't been attached yet\n            if (!this.tagSelected(slug)) {\n                this.tagBadges.push(text.replace(/\\s/g, '&nbsp;'));\n                this.tags.push(slug);\n            }\n\n            // Emit events\n            this.$emit('tag-added', slug);\n            this.$emit('tags-updated');\n        },\n\n        removeLastTag() {\n            if (!this.input.length && this.deleteOnBackspace) {\n                this.removeTag(this.tags.length - 1);\n            }\n        },\n\n        removeTag(index) {\n            let slug = this.tags[index];\n\n            this.tags.splice(index, 1);\n            this.tagBadges.splice(index, 1);\n\n            // Emit events\n            this.$emit('tag-removed', slug);\n            this.$emit('tags-updated');\n        },\n\n        searchTag() {\n            if (this.typeahead === true) {\n                if (this.oldInput != this.input || (!this.searchResults.length && this.typeaheadActivationThreshold == 0)) {\n                    this.searchResults = [];\n                    this.searchSelection = 0;\n                    let input = this.input.trim();\n\n                    if ((input.length && input.length >= this.typeaheadActivationThreshold) || this.typeaheadActivationThreshold == 0) {\n                        for (let slug in this.existingTags) {\n                            let text = this.existingTags[slug].toLowerCase();\n\n                            if (text.search(this.escapeRegExp(input.toLowerCase())) > -1 && ! this.tagSelected(slug)) {\n                                this.searchResults.push({ slug, text: this.existingTags[slug] });\n                            }\n                        }\n\n                        // Sort the search results alphabetically\n                        this.searchResults.sort((a, b) => {\n                            if (a.text < b.text) return -1;\n                            if (a.text > b.text) return 1;\n\n                            return 0;\n                        });\n\n                        // Shorten Search results to desired length\n                        if (this.typeaheadMaxResults > 0) {\n                            this.searchResults = this.searchResults.slice(\n                                0,\n                                this.typeaheadMaxResults\n                            );\n                        }\n                    }\n\n                    this.oldInput = this.input;\n                }\n            }\n        },\n\n        onFocus() {\n            this.searchTag();\n        },\n\n        hideTypeahead() {\n            if (! this.input.length) {\n                this.$nextTick(() => {\n                    this.ignoreSearchResults();\n                });\n            }\n        },\n\n        nextSearchResult() {\n            if (this.searchSelection + 1 <= this.searchResults.length - 1) {\n                this.searchSelection++;\n            }\n        },\n\n        prevSearchResult() {\n            if (this.searchSelection > 0) {\n                this.searchSelection--;\n            }\n        },\n\n        ignoreSearchResults() {\n            this.searchResults = [];\n            this.searchSelection = 0;\n        },\n\n        /**\n        * Clear the list of selected tags\n        */\n        clearTags() {\n            this.tags.splice(0, this.tags.length);\n            this.tagBadges.splice(0, this.tagBadges.length);\n        },\n\n        /**\n        * Replace the currently selected tags with the tags from the value\n        */\n        tagsFromValue() {\n            if (this.value && this.value.length) {\n                let tags = Array.isArray(this.value)\n                    ? this.value\n                    : this.value.split(',');\n\n                if (this.tags == tags) {\n                    return;\n                }\n\n                this.clearTags();\n\n                for (let slug of tags) {\n                    let existingTag = this.existingTags[slug];\n                    let text = existingTag ? existingTag : slug;\n\n                    this.addTag(slug, text);\n                }\n            } else {\n                if (this.tags.length == 0) {\n                    return;\n                }\n\n                this.clearTags();\n            }\n        },\n\n        /**\n        * Check if the tag with the provided slug is already selected\n        */\n        tagSelected(slug) {\n            if (this.allowDuplicates) {\n                return false;\n            }\n\n            if (! slug) {\n                return false;\n            }\n\n            let searchSlug = this.makeSlug(slug);\n            let found = this.tags.find((value) => {\n                return searchSlug == this.makeSlug(value);\n            });\n\n            return !! found;\n        },\n\n        /**\n         * Process all the keydown events\n         */\n        onKeyDown(e) {\n            // Insert a new tag on comma keydown if the option is enabled\n            if (e.key == ',') {\n                if (this.addTagsOnComma) {\n                    // The comma shouldn't actually be inserted\n                    e.preventDefault();\n\n                    // Add the inputed tag\n                    this.tagFromInput();\n                }\n            }\n        },\n    }\n}\n</script>\n\n<style>\n.tags-input-root {\n    position: relative;\n}\n</style>\n"],"sourceRoot":""}*/
version: '3.4'

networks:
    dso_stack:
        driver: bridge

volumes:
    php_socket:
    db_data: {}
    es_data: {}
    es_plugins: {}

services:
    # PHP
    php:
        build:
            context: docker/php
            target: app_php
            args:
                TIMEZONE: ${TIMEZONE}
        restart: unless-stopped
        volumes:
            - ./:/var/www/deep-space-objects
            - php_socket:/var/run/php
            - ./docker/php/conf.d/app.dev.ini:/usr/local/etc/php/conf.d/app.dev.ini:ro
        healthcheck:
            interval: 10s
            timeout: 3s
            retries: 3
            start_period: 30s
        env_file:
          - ".env"
        environment:
            - SSH_AUTH_SOCK=/ssh-agent
            - TERM=xterm-color
        container_name: dso_php
        hostname: php
#        links:
#          - mail
        extra_hosts:
            # Ensure that host.docker.internal is correctly defined on Linux
            - host.docker.internal:host-gateway
        networks:
          - dso_stack

    # NGINX
    nginx:
        build:
            context: docker/nginx
            args:
                NGINX_HOST: ${NGINX_HOST}
                UID: ${SITE_UID}
        container_name: dso_nginx
        hostname: nginx
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - php
        volumes:
            - .:/var/www/deep-space-objects
            - ./logs/nginx/:/var/log/nginx:cached
            #- /etc/letsencrypt/:/etc/letsencrypt/
        env_file:
            - .env
        environment:
            - NGINX_HOST=${NGINX_HOST}
        networks:
            - dso_stack

    # ElasticSearch
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
        container_name: dso_elasticsearch
        hostname: elasticsearch
        volumes:
            - es_data:/usr/share/elasticsearch/data
            - es_plugins:/usr/share/elasticsearch/plugins
        environment:
            - xpack.security.enabled=false
            - discovery.type=single-node
            - cluster.name=demo
            - bootstrap.memory_lock=true
            - http.cors.enabled=true
            - http.cors.allow-origin=*
            - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        cap_add:
            - IPC_LOCK
        ports:
            - "9200:9200"
        networks:
            - dso_stack

    # Kibana
    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.7
        container_name: dso_kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        links:
            - elasticsearch
        ports:
            - "5601:5601"
        networks:
            - dso_stack

    # MySQL
    database:
        image: mariadb:10.3
        container_name: dso_database
        hostname: database
        restart: always
        volumes:
            - db_data:/var/lib/mysql
            - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql
        env_file:
            - ".env"
        environment:
            - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
            - MYSQL_DATABASE=${DATABASE_NAME}
            - MYSQL_USER=${DATABASE_USER}
            - MYSQL_PASSWORD=${DATABASE_PASSWORD}
        ports:
          - "3307:3306"
        networks:
          - dso_stack

    #MAIL - SMTP Server
#    mail:
#        image: bytemark/smtp
#        container_name: dso_mail
#        restart: always
#        networks:
#          - dso_stack

    # redis
    redis:
        image: redis:6.0-alpine
        hostname: redis
        container_name: dso_redis
        restart: always
        ports:
            - '6379:6379'
        networks:
            - dso_stack
